package com.js.phonicdiary.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.js.phonicdiary.bean.PhotoInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHOTO_INFO".
*/
public class PhotoInfoDao extends AbstractDao<PhotoInfo, Long> {

    public static final String TABLENAME = "PHOTO_INFO";

    /**
     * Properties of entity PhotoInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Path = new Property(2, String.class, "path", false, "path");
        public final static Property Type = new Property(3, String.class, "type", false, "type");
        public final static Property Width = new Property(4, int.class, "width", false, "width");
        public final static Property Height = new Property(5, int.class, "height", false, "height");
        public final static Property Size = new Property(6, long.class, "size", false, "size");
        public final static Property Duration = new Property(7, long.class, "duration", false, "duration");
        public final static Property Time = new Property(8, long.class, "time", false, "time");
        public final static Property CreateTime = new Property(9, long.class, "createTime", false, "createTime");
    }

    private Query<PhotoInfo> diaryInfo_PhotoInfosQuery;

    public PhotoInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PhotoInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHOTO_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"name\" TEXT," + // 1: name
                "\"path\" TEXT," + // 2: path
                "\"type\" TEXT," + // 3: type
                "\"width\" INTEGER NOT NULL ," + // 4: width
                "\"height\" INTEGER NOT NULL ," + // 5: height
                "\"size\" INTEGER NOT NULL ," + // 6: size
                "\"duration\" INTEGER NOT NULL ," + // 7: duration
                "\"time\" INTEGER NOT NULL ," + // 8: time
                "\"createTime\" INTEGER NOT NULL );"); // 9: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHOTO_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhotoInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
        stmt.bindLong(5, entity.getWidth());
        stmt.bindLong(6, entity.getHeight());
        stmt.bindLong(7, entity.getSize());
        stmt.bindLong(8, entity.getDuration());
        stmt.bindLong(9, entity.getTime());
        stmt.bindLong(10, entity.getCreateTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhotoInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
        stmt.bindLong(5, entity.getWidth());
        stmt.bindLong(6, entity.getHeight());
        stmt.bindLong(7, entity.getSize());
        stmt.bindLong(8, entity.getDuration());
        stmt.bindLong(9, entity.getTime());
        stmt.bindLong(10, entity.getCreateTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public PhotoInfo readEntity(Cursor cursor, int offset) {
        PhotoInfo entity = new PhotoInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.getInt(offset + 4), // width
            cursor.getInt(offset + 5), // height
            cursor.getLong(offset + 6), // size
            cursor.getLong(offset + 7), // duration
            cursor.getLong(offset + 8), // time
            cursor.getLong(offset + 9) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhotoInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWidth(cursor.getInt(offset + 4));
        entity.setHeight(cursor.getInt(offset + 5));
        entity.setSize(cursor.getLong(offset + 6));
        entity.setDuration(cursor.getLong(offset + 7));
        entity.setTime(cursor.getLong(offset + 8));
        entity.setCreateTime(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PhotoInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PhotoInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PhotoInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "photoInfos" to-many relationship of DiaryInfo. */
    public List<PhotoInfo> _queryDiaryInfo_PhotoInfos(long createTime) {
        synchronized (this) {
            if (diaryInfo_PhotoInfosQuery == null) {
                QueryBuilder<PhotoInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CreateTime.eq(null));
                diaryInfo_PhotoInfosQuery = queryBuilder.build();
            }
        }
        Query<PhotoInfo> query = diaryInfo_PhotoInfosQuery.forCurrentThread();
        query.setParameter(0, createTime);
        return query.list();
    }

}
