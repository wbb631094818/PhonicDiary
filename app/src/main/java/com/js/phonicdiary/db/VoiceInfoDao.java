package com.js.phonicdiary.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.js.phonicdiary.bean.VoiceInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VOICE_INFO".
*/
public class VoiceInfoDao extends AbstractDao<VoiceInfo, Long> {

    public static final String TABLENAME = "VOICE_INFO";

    /**
     * Properties of entity VoiceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property CreateTime = new Property(1, long.class, "createTime", false, "createTime");
        public final static Property FileCreateDate = new Property(2, long.class, "fileCreateDate", false, "fileCreateDate");
        public final static Property FileName = new Property(3, String.class, "fileName", false, "fileName");
        public final static Property FileSize = new Property(4, long.class, "fileSize", false, "fileSize");
        public final static Property FilePath = new Property(5, String.class, "filePath", false, "filePath");
    }

    private Query<VoiceInfo> diaryInfo_VoiceInfosQuery;

    public VoiceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public VoiceInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VOICE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"createTime\" INTEGER NOT NULL ," + // 1: createTime
                "\"fileCreateDate\" INTEGER NOT NULL ," + // 2: fileCreateDate
                "\"fileName\" TEXT," + // 3: fileName
                "\"fileSize\" INTEGER NOT NULL ," + // 4: fileSize
                "\"filePath\" TEXT);"); // 5: filePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VOICE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VoiceInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getCreateTime());
        stmt.bindLong(3, entity.getFileCreateDate());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
        stmt.bindLong(5, entity.getFileSize());
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(6, filePath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VoiceInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getCreateTime());
        stmt.bindLong(3, entity.getFileCreateDate());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
        stmt.bindLong(5, entity.getFileSize());
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(6, filePath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public VoiceInfo readEntity(Cursor cursor, int offset) {
        VoiceInfo entity = new VoiceInfo( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // createTime
            cursor.getLong(offset + 2), // fileCreateDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileName
            cursor.getLong(offset + 4), // fileSize
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // filePath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VoiceInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setCreateTime(cursor.getLong(offset + 1));
        entity.setFileCreateDate(cursor.getLong(offset + 2));
        entity.setFileName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileSize(cursor.getLong(offset + 4));
        entity.setFilePath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VoiceInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VoiceInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VoiceInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "voiceInfos" to-many relationship of DiaryInfo. */
    public List<VoiceInfo> _queryDiaryInfo_VoiceInfos(long createTime) {
        synchronized (this) {
            if (diaryInfo_VoiceInfosQuery == null) {
                QueryBuilder<VoiceInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CreateTime.eq(null));
                diaryInfo_VoiceInfosQuery = queryBuilder.build();
            }
        }
        Query<VoiceInfo> query = diaryInfo_VoiceInfosQuery.forCurrentThread();
        query.setParameter(0, createTime);
        return query.list();
    }

}
